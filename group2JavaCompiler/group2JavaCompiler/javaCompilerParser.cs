// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  PRETTYPC
// DateTime: 5/24/2016 12:25:01 AM
// UserName: Pretty
// Input file <javaCompilerParser.y - 5/24/2016 12:24:47 AM>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace javaCompiler.Parser
{
public enum Tokens {error=2,EOF=3,IDENTIFIER=4,INTEGER_LITERAL=5,BOOL_LITERAL=6,
    PUBLIC=7,PROTECTED=8,PRIVATE=9,ABSTRACT=10,STATIC=11,FINAL=12,
    SYNCHRONIZED=13,NATIVE=14,STRICTFP=15,VOID=16,EXPRESSION_STATEMENT=17,MAIN=18,
    CLASS=19,BOOL=20,INT=21,STRING=22,IMPORT=23,OP_LEFT_PAR=24,
    OP_RIGHT_PAR=25,OP_SQ_L_BR=26,OP_SQ_R_BR=27,OP_LT_BRACE=28,OP_RT_BRACE=29,SEMICOLON=30,
    OP_DOT=31,SYSTEM=32,OUT=33,PRINTLN=34,IF=35,ELSE=36,
    OP_ARROW=37,OP_ASSIGN=38,OP_ADD=39,OP_MINUS=40,OP_MUL=41,OP_DIV=42,
    OP_MODUL=43,OP_AND=44,OP_OR=45,OP_NOT=46,OP_EQU=47,OP_NOT_EQU=48,
    OP_LT=49,OP_GT=50,OP_GT_EQ=51,OP_LT_EQ=52,OP_DOUBLE_QUOTE=53};

public struct ValueType
#line 5 "javaCompilerParser.y"
       {
    public int Integer;
    public string String;
  	public bool Bool;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[102];
  private static State[] states = new State[146];
  private static string[] nonTerms = new string[] {
      "CompilationUnit", "$accept", "TypeDeclaration", "ImportDeclaration", "SingleTypeImportDeclaration", 
      "TypeName", "PackageOrTypeName", "ClassDeclaration", "NormalClassDeclaration", 
      "ClassModifiers", "ClassBody", "ClassModifier", "ClassBodyDeclaration", 
      "ClassMemberDeclaration", "MethodDeclaration", "MethodModifiers", "MethodHeader", 
      "MethodBody", "MethodModifier", "Result", "MethodDeclarator", "FormalParameterList", 
      "LastFormalParameter", "FormalParameter", "UnannType", "VariableDeclaratorId", 
      "UnannReferenceType", "UnannPrimitiveType", "UnannArrayType", "UnannTypeVariable", 
      "Dims", "Block", "BlockStatements", "BlockStatement", "LocalVariableDeclarationStatement", 
      "Statement", "StatementWithoutTrailingSubstatement", "IfThenElseStatement", 
      "Expression", "StatementNoShortIf", "ExpressionStatement", "EmptyStatement", 
      "StatementExpression", "MethodInvocation", "MethodName", "ArgumentList", 
      "AssignmentExpression", "LambdaExpression", "LambdaParameters", "LambdaBody", 
      "LocalVariableDeclaration", "VariableDeclaratorList", "NumericType", "IntegralType", 
      "VariableDeclarator", "VariableInitializer", "ConditionalExpression", "ConditionalOrExpression", 
      "ConditionalAndExpression", "InclusiveOrExpression", "ExclusiveOrExpression", 
      "AndExpression", "EqualityExpression", "RelationalExpression", "ShiftExpression", 
      "AdditiveExpression", "MultiplicativeExpression", "UnaryExpression", "UnaryExpressionNotPlusMinus", 
      "PostfixExpression", "Primary", "PrimaryNoNewArray", "Literal", };

  static Parser() {
    states[0] = new State(new int[]{7,127,8,128,9,129,10,130,11,131,12,132,15,133,19,134,23,140},new int[]{-1,1,-3,3,-8,4,-9,5,-10,6,-12,125,-4,137,-5,139});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(-10);
    states[5] = new State(-11);
    states[6] = new State(new int[]{19,7});
    states[7] = new State(new int[]{4,8});
    states[8] = new State(new int[]{28,10},new int[]{-11,9});
    states[9] = new State(-12);
    states[10] = new State(new int[]{7,114,8,115,9,116,10,117,11,118,12,119,13,120,14,121,15,122,16,111},new int[]{-13,11,-14,13,-15,14,-16,15,-19,112,-17,123,-20,100});
    states[11] = new State(new int[]{29,12});
    states[12] = new State(-23);
    states[13] = new State(-24);
    states[14] = new State(-25);
    states[15] = new State(new int[]{16,111},new int[]{-17,16,-20,100});
    states[16] = new State(new int[]{28,19},new int[]{-18,17,-32,18});
    states[17] = new State(-26);
    states[18] = new State(-52);
    states[19] = new State(new int[]{4,67,21,71,32,83,30,89,28,19,35,92},new int[]{-33,20,-34,22,-35,23,-51,24,-25,26,-27,61,-29,62,-30,63,-28,68,-53,69,-54,70,-36,72,-37,73,-41,74,-43,75,-44,77,-45,78,-42,88,-32,90,-38,91});
    states[20] = new State(new int[]{29,21});
    states[21] = new State(-53);
    states[22] = new State(-54);
    states[23] = new State(-55);
    states[24] = new State(new int[]{30,25});
    states[25] = new State(-75);
    states[26] = new State(new int[]{4,60},new int[]{-52,27,-55,28,-26,29});
    states[27] = new State(-76);
    states[28] = new State(-80);
    states[29] = new State(new int[]{47,30});
    states[30] = new State(new int[]{5,51,53,57},new int[]{-56,31,-39,32,-47,33,-57,34,-58,35,-59,36,-60,37,-61,38,-62,39,-63,40,-64,41,-65,42,-66,43,-67,44,-68,45,-69,46,-70,47,-71,48,-72,49,-73,50,-48,52,-49,53});
    states[31] = new State(-81);
    states[32] = new State(-83);
    states[33] = new State(-70);
    states[34] = new State(-84);
    states[35] = new State(-85);
    states[36] = new State(-86);
    states[37] = new State(-87);
    states[38] = new State(-88);
    states[39] = new State(-89);
    states[40] = new State(-90);
    states[41] = new State(-91);
    states[42] = new State(-92);
    states[43] = new State(-93);
    states[44] = new State(-94);
    states[45] = new State(-95);
    states[46] = new State(-96);
    states[47] = new State(-97);
    states[48] = new State(-98);
    states[49] = new State(-99);
    states[50] = new State(-100);
    states[51] = new State(-101);
    states[52] = new State(-71);
    states[53] = new State(new int[]{37,54});
    states[54] = new State(new int[]{28,19},new int[]{-50,55,-32,56});
    states[55] = new State(-72);
    states[56] = new State(-74);
    states[57] = new State(new int[]{4,58});
    states[58] = new State(new int[]{53,59});
    states[59] = new State(-73);
    states[60] = new State(-82);
    states[61] = new State(-46);
    states[62] = new State(-48);
    states[63] = new State(new int[]{26,65},new int[]{-31,64});
    states[64] = new State(-49);
    states[65] = new State(new int[]{27,66});
    states[66] = new State(-51);
    states[67] = new State(-50);
    states[68] = new State(-47);
    states[69] = new State(-77);
    states[70] = new State(-78);
    states[71] = new State(-79);
    states[72] = new State(-56);
    states[73] = new State(-57);
    states[74] = new State(-61);
    states[75] = new State(new int[]{30,76});
    states[76] = new State(-65);
    states[77] = new State(-66);
    states[78] = new State(new int[]{24,79});
    states[79] = new State(new int[]{5,51,53,57},new int[]{-46,80,-39,82,-47,33,-57,34,-58,35,-59,36,-60,37,-61,38,-62,39,-63,40,-64,41,-65,42,-66,43,-67,44,-68,45,-69,46,-70,47,-71,48,-72,49,-73,50,-48,52,-49,53});
    states[80] = new State(new int[]{25,81});
    states[81] = new State(-67);
    states[82] = new State(-69);
    states[83] = new State(new int[]{31,84});
    states[84] = new State(new int[]{33,85});
    states[85] = new State(new int[]{31,86});
    states[86] = new State(new int[]{34,87});
    states[87] = new State(-68);
    states[88] = new State(-62);
    states[89] = new State(-64);
    states[90] = new State(-63);
    states[91] = new State(-58);
    states[92] = new State(new int[]{24,93});
    states[93] = new State(new int[]{5,51,53,57},new int[]{-39,94,-47,33,-57,34,-58,35,-59,36,-60,37,-61,38,-62,39,-63,40,-64,41,-65,42,-66,43,-67,44,-68,45,-69,46,-70,47,-71,48,-72,49,-73,50,-48,52,-49,53});
    states[94] = new State(new int[]{25,95});
    states[95] = new State(new int[]{32,83,30,89,28,19},new int[]{-40,96,-37,99,-41,74,-43,75,-44,77,-45,78,-42,88,-32,90});
    states[96] = new State(new int[]{36,97});
    states[97] = new State(new int[]{32,83,30,89,28,19,35,92},new int[]{-36,98,-37,73,-41,74,-43,75,-44,77,-45,78,-42,88,-32,90,-38,91});
    states[98] = new State(-59);
    states[99] = new State(-60);
    states[100] = new State(new int[]{4,102},new int[]{-21,101});
    states[101] = new State(-39);
    states[102] = new State(new int[]{24,103});
    states[103] = new State(new int[]{25,106,4,67,21,71},new int[]{-22,104,-23,107,-24,108,-25,109,-27,61,-29,62,-30,63,-28,68,-53,69,-54,70});
    states[104] = new State(new int[]{25,105});
    states[105] = new State(-41);
    states[106] = new State(-42);
    states[107] = new State(-43);
    states[108] = new State(-44);
    states[109] = new State(new int[]{4,60},new int[]{-26,110});
    states[110] = new State(-45);
    states[111] = new State(-40);
    states[112] = new State(new int[]{7,114,8,115,9,116,10,117,11,118,12,119,13,120,14,121,15,122,16,-29},new int[]{-16,113,-19,112});
    states[113] = new State(-28);
    states[114] = new State(-30);
    states[115] = new State(-31);
    states[116] = new State(-32);
    states[117] = new State(-33);
    states[118] = new State(-34);
    states[119] = new State(-35);
    states[120] = new State(-36);
    states[121] = new State(-37);
    states[122] = new State(-38);
    states[123] = new State(new int[]{28,19},new int[]{-18,124,-32,18});
    states[124] = new State(-27);
    states[125] = new State(new int[]{7,127,8,128,9,129,10,130,11,131,12,132,15,133,19,-15},new int[]{-10,126,-12,125});
    states[126] = new State(-14);
    states[127] = new State(-16);
    states[128] = new State(-17);
    states[129] = new State(-18);
    states[130] = new State(-19);
    states[131] = new State(-20);
    states[132] = new State(-21);
    states[133] = new State(-22);
    states[134] = new State(new int[]{4,135});
    states[135] = new State(new int[]{28,10},new int[]{-11,136});
    states[136] = new State(-13);
    states[137] = new State(new int[]{7,127,8,128,9,129,10,130,11,131,12,132,15,133,19,134,3,-3},new int[]{-3,138,-8,4,-9,5,-10,6,-12,125});
    states[138] = new State(-4);
    states[139] = new State(-5);
    states[140] = new State(new int[]{4,145},new int[]{-6,141,-7,142});
    states[141] = new State(-6);
    states[142] = new State(new int[]{31,143});
    states[143] = new State(new int[]{4,144});
    states[144] = new State(new int[]{7,-7,8,-7,9,-7,10,-7,11,-7,12,-7,15,-7,19,-7,3,-7,31,-8});
    states[145] = new State(-9);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-1, new int[]{-4});
    rules[4] = new Rule(-1, new int[]{-4,-3});
    rules[5] = new Rule(-4, new int[]{-5});
    rules[6] = new Rule(-5, new int[]{23,-6});
    rules[7] = new Rule(-6, new int[]{-7,31,4});
    rules[8] = new Rule(-7, new int[]{-7,31,4});
    rules[9] = new Rule(-7, new int[]{4});
    rules[10] = new Rule(-3, new int[]{-8});
    rules[11] = new Rule(-8, new int[]{-9});
    rules[12] = new Rule(-9, new int[]{-10,19,4,-11});
    rules[13] = new Rule(-9, new int[]{19,4,-11});
    rules[14] = new Rule(-10, new int[]{-12,-10});
    rules[15] = new Rule(-10, new int[]{-12});
    rules[16] = new Rule(-12, new int[]{7});
    rules[17] = new Rule(-12, new int[]{8});
    rules[18] = new Rule(-12, new int[]{9});
    rules[19] = new Rule(-12, new int[]{10});
    rules[20] = new Rule(-12, new int[]{11});
    rules[21] = new Rule(-12, new int[]{12});
    rules[22] = new Rule(-12, new int[]{15});
    rules[23] = new Rule(-11, new int[]{28,-13,29});
    rules[24] = new Rule(-13, new int[]{-14});
    rules[25] = new Rule(-14, new int[]{-15});
    rules[26] = new Rule(-15, new int[]{-16,-17,-18});
    rules[27] = new Rule(-15, new int[]{-17,-18});
    rules[28] = new Rule(-16, new int[]{-19,-16});
    rules[29] = new Rule(-16, new int[]{-19});
    rules[30] = new Rule(-19, new int[]{7});
    rules[31] = new Rule(-19, new int[]{8});
    rules[32] = new Rule(-19, new int[]{9});
    rules[33] = new Rule(-19, new int[]{10});
    rules[34] = new Rule(-19, new int[]{11});
    rules[35] = new Rule(-19, new int[]{12});
    rules[36] = new Rule(-19, new int[]{13});
    rules[37] = new Rule(-19, new int[]{14});
    rules[38] = new Rule(-19, new int[]{15});
    rules[39] = new Rule(-17, new int[]{-20,-21});
    rules[40] = new Rule(-20, new int[]{16});
    rules[41] = new Rule(-21, new int[]{4,24,-22,25});
    rules[42] = new Rule(-21, new int[]{4,24,25});
    rules[43] = new Rule(-22, new int[]{-23});
    rules[44] = new Rule(-23, new int[]{-24});
    rules[45] = new Rule(-24, new int[]{-25,-26});
    rules[46] = new Rule(-25, new int[]{-27});
    rules[47] = new Rule(-25, new int[]{-28});
    rules[48] = new Rule(-27, new int[]{-29});
    rules[49] = new Rule(-29, new int[]{-30,-31});
    rules[50] = new Rule(-30, new int[]{4});
    rules[51] = new Rule(-31, new int[]{26,27});
    rules[52] = new Rule(-18, new int[]{-32});
    rules[53] = new Rule(-32, new int[]{28,-33,29});
    rules[54] = new Rule(-33, new int[]{-34});
    rules[55] = new Rule(-34, new int[]{-35});
    rules[56] = new Rule(-34, new int[]{-36});
    rules[57] = new Rule(-36, new int[]{-37});
    rules[58] = new Rule(-36, new int[]{-38});
    rules[59] = new Rule(-38, new int[]{35,24,-39,25,-40,36,-36});
    rules[60] = new Rule(-40, new int[]{-37});
    rules[61] = new Rule(-37, new int[]{-41});
    rules[62] = new Rule(-37, new int[]{-42});
    rules[63] = new Rule(-37, new int[]{-32});
    rules[64] = new Rule(-42, new int[]{30});
    rules[65] = new Rule(-41, new int[]{-43,30});
    rules[66] = new Rule(-43, new int[]{-44});
    rules[67] = new Rule(-44, new int[]{-45,24,-46,25});
    rules[68] = new Rule(-45, new int[]{32,31,33,31,34});
    rules[69] = new Rule(-46, new int[]{-39});
    rules[70] = new Rule(-39, new int[]{-47});
    rules[71] = new Rule(-39, new int[]{-48});
    rules[72] = new Rule(-48, new int[]{-49,37,-50});
    rules[73] = new Rule(-49, new int[]{53,4,53});
    rules[74] = new Rule(-50, new int[]{-32});
    rules[75] = new Rule(-35, new int[]{-51,30});
    rules[76] = new Rule(-51, new int[]{-25,-52});
    rules[77] = new Rule(-28, new int[]{-53});
    rules[78] = new Rule(-53, new int[]{-54});
    rules[79] = new Rule(-54, new int[]{21});
    rules[80] = new Rule(-52, new int[]{-55});
    rules[81] = new Rule(-55, new int[]{-26,47,-56});
    rules[82] = new Rule(-26, new int[]{4});
    rules[83] = new Rule(-56, new int[]{-39});
    rules[84] = new Rule(-47, new int[]{-57});
    rules[85] = new Rule(-57, new int[]{-58});
    rules[86] = new Rule(-58, new int[]{-59});
    rules[87] = new Rule(-59, new int[]{-60});
    rules[88] = new Rule(-60, new int[]{-61});
    rules[89] = new Rule(-61, new int[]{-62});
    rules[90] = new Rule(-62, new int[]{-63});
    rules[91] = new Rule(-63, new int[]{-64});
    rules[92] = new Rule(-64, new int[]{-65});
    rules[93] = new Rule(-65, new int[]{-66});
    rules[94] = new Rule(-66, new int[]{-67});
    rules[95] = new Rule(-67, new int[]{-68});
    rules[96] = new Rule(-68, new int[]{-69});
    rules[97] = new Rule(-69, new int[]{-70});
    rules[98] = new Rule(-70, new int[]{-71});
    rules[99] = new Rule(-71, new int[]{-72});
    rules[100] = new Rule(-72, new int[]{-73});
    rules[101] = new Rule(-73, new int[]{5});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 228 "javaCompilerParser.y"

public Parser(javaCompiler.Lexer.Scanner scanner) : base(scanner)
{
}
#line default
}
}
