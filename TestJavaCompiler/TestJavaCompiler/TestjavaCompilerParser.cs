// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  HARSH
// DateTime: 6/3/2016 6:26:16 PM
// UserName: Iamharsh
// Input file <TestJavaCompilerParser.y - 6/3/2016 6:24:55 PM>

// options: lines

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace TestJavaCompiler
{
public enum Tokens {error=2,EOF=3,IDENTIFIER=4,NUMBER=5,BOOL_LITERAL=6,
    PUBLIC=7,PROTECTED=8,PRIVATE=9,ABSTRACT=10,STATIC=11,FINAL=12,
    SYNCHRONIZED=13,NATIVE=14,STRICTFP=15,VOID=16,EXPRESSION_STATEMENT=17,CLASS=18,
    BOOL=19,INT=20,STRING=21,IMPORT=22,OP_LEFT_PAR=23,OP_RIGHT_PAR=24,
    OP_SQ_L_BR=25,OP_SQ_R_BR=26,OP_LT_BRACE=27,OP_RT_BRACE=28,SEMICOLON=29,OP_DOT=30,
    SYSTEM=31,OUT=32,PRINTLN=33,WHILE=34,ELSE=35,OP_ARROW=36,
    OP_ASSIGN=37,OP_ADD=38,OP_MINUS=39,OP_MUL=40,OP_DIV=41,OP_MODUL=42,
    OP_AND=43,OP_OR=44,OP_NOT=45,OP_EQU=46,OP_NOT_EQU=47,OP_LT=48,
    OP_GT=49,OP_GT_EQ=50,OP_LT_EQ=51,OP_DOUBLE_QUOTE=52};

public struct ValueType
#line 9 "TestJavaCompilerParser.y"
{
    public AST.Expression expr;
	public AST.Statement stmt;
	public AST.CompoundStatement compoundStmt;
	public AST.ClassMemberDeclaration member;
	public AST.Method method;
	public AST.Type type;
	public AST.Parameter param;
	public AST.VariableDeclarator varDeclarator;
	public AST.VariableDeclaratorId varDeclaratorId;
	public AST.VariableDeclarationExpr varDeclaratorExpr;
	public AST.Class classRoot;
	public AST.ClassModifier classmodi;
	public System.Collections.Generic.List<AST.Statement> stmts;
	public System.Collections.Generic.List<AST.VariableDeclarator> varList;
	public int num;
    public string String;
  	public bool Bool;
	
}
#line default
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from TestJavaCompilerParser.y - 6/3/2016 6:24:55 PM
#line 5 "TestJavaCompilerParser.y"
public static AST.Class root;
#line default
  // End verbatim content from TestJavaCompilerParser.y - 6/3/2016 6:24:55 PM

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[106];
  private static State[] states = new State[147];
  private static string[] nonTerms = new string[] {
      "ClassModifier", "VariableDeclarator", "VariableDeclaratorId", "ExpressionName", 
      "VariableDeclaratorList", "LocalVariableDeclaration", "FormalParameterList", 
      "LastFormalParameter", "FormalParameter", "UnannType", "Result", "IntegralType", 
      "NumericType", "UnannPrimitiveType", "ClassMemberDeclaration", "Expression", 
      "VariableInitializer", "AssignmentExpression", "ConditionalExpression", 
      "ConditionalAndExpression", "ConditionalOrExpression", "InclusiveOrExpression", 
      "ExclusiveOrExpression", "AndExpression", "EqualityExpression", "RelationalExpression", 
      "ShiftExpression", "AdditiveExpression", "MultiplicativeExpression", "UnaryExpression", 
      "UnaryExpressionNotPlusMinus", "PostfixExpression", "Primary", "PrimaryNoNewArray", 
      "Literal", "Statement", "BlockStatement", "Block", "MethodBody", "BlockStatements", 
      "MethodDeclaration", "NormalClassDeclaration", "CompilationUnit", "ClassDeclaration", 
      "$accept", "ClassModifiers", "FieldDeclaration", "MethodModifiers", "MethodModifier", 
      "UnannReferenceType", "StatementWithoutTrailingSubstatement", "WhileStatement", 
      "ExpressionStatement", "EmptyStatement", "StatementExpression", "MethodInvocation", 
      "MethodName", "ArgumentList", "TypeDeclaration", "ImportDeclaration", "SingleTypeImportDeclaration", 
      "TypeName", "PackageOrTypeName", "Annotation", "FieldModifier", "UnannArrayType", 
      "UnannTypeVariable", "Dims", };

  static Parser() {
    states[0] = new State(new int[]{7,131,8,132,9,133,10,134,11,135,12,136,15,137,22,141,18,-85},new int[]{-43,1,-59,3,-44,4,-42,5,-46,6,-1,129,-60,138,-61,140});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(-75);
    states[4] = new State(-83);
    states[5] = new State(-2);
    states[6] = new State(new int[]{18,7});
    states[7] = new State(new int[]{4,8});
    states[8] = new State(new int[]{27,9});
    states[9] = new State(new int[]{7,116,8,117,9,118,10,119,11,120,12,121,13,113,14,114,15,115,4,103,20,68,16,-8},new int[]{-15,10,-41,12,-48,13,-49,105,-47,122,-10,123,-50,58,-66,59,-67,60,-14,65,-13,66,-12,67,-65,125,-64,128});
    states[10] = new State(new int[]{28,11});
    states[11] = new State(-3);
    states[12] = new State(-4);
    states[13] = new State(new int[]{16,104},new int[]{-11,14});
    states[14] = new State(new int[]{4,15});
    states[15] = new State(new int[]{23,16});
    states[16] = new State(new int[]{4,103,20,68,24,-11},new int[]{-7,17,-8,99,-9,100,-10,101,-50,58,-66,59,-67,60,-14,65,-13,66,-12,67});
    states[17] = new State(new int[]{24,18});
    states[18] = new State(new int[]{27,21},new int[]{-39,19,-38,20});
    states[19] = new State(-6);
    states[20] = new State(-19);
    states[21] = new State(-22,new int[]{-40,22});
    states[22] = new State(new int[]{28,23,4,64,20,68,27,71,31,86,29,92,34,94},new int[]{-37,24,-6,25,-10,27,-50,58,-66,59,-67,60,-14,65,-13,66,-12,67,-36,69,-51,70,-53,74,-55,75,-4,77,-56,80,-57,81,-54,91,-52,93});
    states[23] = new State(-20);
    states[24] = new State(-21);
    states[25] = new State(new int[]{29,26});
    states[26] = new State(-23);
    states[27] = new State(-28,new int[]{-5,28});
    states[28] = new State(new int[]{4,57,29,-26},new int[]{-2,29,-3,30});
    states[29] = new State(-27);
    states[30] = new State(new int[]{46,31,4,-29,29,-29,28,-29});
    states[31] = new State(new int[]{5,52,4,56},new int[]{-17,32,-16,33,-18,34,-19,35,-21,36,-20,37,-22,38,-23,39,-24,40,-25,41,-26,42,-27,43,-28,44,-29,45,-30,46,-31,47,-32,48,-33,49,-34,50,-35,51,-4,53});
    states[32] = new State(-30);
    states[33] = new State(-31);
    states[34] = new State(-32);
    states[35] = new State(-33);
    states[36] = new State(-35);
    states[37] = new State(-36);
    states[38] = new State(-37);
    states[39] = new State(-38);
    states[40] = new State(-39);
    states[41] = new State(-40);
    states[42] = new State(-41);
    states[43] = new State(-42);
    states[44] = new State(-43);
    states[45] = new State(-44);
    states[46] = new State(-45);
    states[47] = new State(-46);
    states[48] = new State(-47);
    states[49] = new State(-48);
    states[50] = new State(-49);
    states[51] = new State(-50);
    states[52] = new State(-51);
    states[53] = new State(new int[]{46,54});
    states[54] = new State(new int[]{5,52,4,56},new int[]{-16,55,-18,34,-19,35,-21,36,-20,37,-22,38,-23,39,-24,40,-25,41,-26,42,-27,43,-28,44,-29,45,-30,46,-31,47,-32,48,-33,49,-34,50,-35,51,-4,53});
    states[55] = new State(-34);
    states[56] = new State(-62);
    states[57] = new State(-25);
    states[58] = new State(-14);
    states[59] = new State(-102);
    states[60] = new State(new int[]{25,62},new int[]{-68,61});
    states[61] = new State(-103);
    states[62] = new State(new int[]{26,63});
    states[63] = new State(-105);
    states[64] = new State(new int[]{25,-104,46,-62});
    states[65] = new State(-15);
    states[66] = new State(-16);
    states[67] = new State(-17);
    states[68] = new State(-18);
    states[69] = new State(-24);
    states[70] = new State(-52);
    states[71] = new State(new int[]{27,71,4,56,31,86,29,92,34,94},new int[]{-36,72,-51,70,-53,74,-55,75,-4,77,-56,80,-57,81,-54,91,-52,93});
    states[72] = new State(new int[]{28,73});
    states[73] = new State(-55);
    states[74] = new State(-56);
    states[75] = new State(new int[]{29,76});
    states[76] = new State(-59);
    states[77] = new State(new int[]{46,78});
    states[78] = new State(new int[]{5,52,4,56},new int[]{-16,79,-18,34,-19,35,-21,36,-20,37,-22,38,-23,39,-24,40,-25,41,-26,42,-27,43,-28,44,-29,45,-30,46,-31,47,-32,48,-33,49,-34,50,-35,51,-4,53});
    states[79] = new State(-60);
    states[80] = new State(-61);
    states[81] = new State(new int[]{23,82});
    states[82] = new State(new int[]{5,52,4,56},new int[]{-58,83,-16,85,-18,34,-19,35,-21,36,-20,37,-22,38,-23,39,-24,40,-25,41,-26,42,-27,43,-28,44,-29,45,-30,46,-31,47,-32,48,-33,49,-34,50,-35,51,-4,53});
    states[83] = new State(new int[]{24,84});
    states[84] = new State(-63);
    states[85] = new State(-65);
    states[86] = new State(new int[]{30,87});
    states[87] = new State(new int[]{32,88});
    states[88] = new State(new int[]{30,89});
    states[89] = new State(new int[]{33,90});
    states[90] = new State(-64);
    states[91] = new State(-57);
    states[92] = new State(-58);
    states[93] = new State(-53);
    states[94] = new State(new int[]{23,95});
    states[95] = new State(new int[]{5,52,4,56},new int[]{-16,96,-18,34,-19,35,-21,36,-20,37,-22,38,-23,39,-24,40,-25,41,-26,42,-27,43,-28,44,-29,45,-30,46,-31,47,-32,48,-33,49,-34,50,-35,51,-4,53});
    states[96] = new State(new int[]{24,97});
    states[97] = new State(new int[]{27,71,4,56,31,86,29,92,34,94},new int[]{-36,98,-51,70,-53,74,-55,75,-4,77,-56,80,-57,81,-54,91,-52,93});
    states[98] = new State(-54);
    states[99] = new State(-10);
    states[100] = new State(-12);
    states[101] = new State(new int[]{4,57},new int[]{-3,102});
    states[102] = new State(-13);
    states[103] = new State(-104);
    states[104] = new State(-9);
    states[105] = new State(new int[]{7,107,8,108,9,109,10,110,11,111,12,112,13,113,14,114,15,115,16,-8},new int[]{-48,106,-49,105});
    states[106] = new State(-7);
    states[107] = new State(-66);
    states[108] = new State(-67);
    states[109] = new State(-68);
    states[110] = new State(-69);
    states[111] = new State(-70);
    states[112] = new State(-71);
    states[113] = new State(-72);
    states[114] = new State(-73);
    states[115] = new State(-74);
    states[116] = new State(new int[]{7,-66,8,-66,9,-66,10,-66,11,-66,12,-66,13,-66,14,-66,15,-66,16,-66,4,-93,20,-93});
    states[117] = new State(new int[]{7,-67,8,-67,9,-67,10,-67,11,-67,12,-67,13,-67,14,-67,15,-67,16,-67,4,-94,20,-94});
    states[118] = new State(new int[]{7,-68,8,-68,9,-68,10,-68,11,-68,12,-68,13,-68,14,-68,15,-68,16,-68,4,-95,20,-95});
    states[119] = new State(new int[]{7,-69,8,-69,9,-69,10,-69,11,-69,12,-69,13,-69,14,-69,15,-69,16,-69,4,-96,20,-96});
    states[120] = new State(new int[]{7,-70,8,-70,9,-70,10,-70,11,-70,12,-70,13,-70,14,-70,15,-70,16,-70,4,-97,20,-97});
    states[121] = new State(new int[]{7,-71,8,-71,9,-71,10,-71,11,-71,12,-71,13,-71,14,-71,15,-71,16,-71,4,-98,20,-98});
    states[122] = new State(-5);
    states[123] = new State(-28,new int[]{-5,124});
    states[124] = new State(new int[]{4,57,28,-99},new int[]{-2,29,-3,30});
    states[125] = new State(new int[]{4,103,20,68},new int[]{-10,126,-50,58,-66,59,-67,60,-14,65,-13,66,-12,67});
    states[126] = new State(-28,new int[]{-5,127});
    states[127] = new State(new int[]{4,57,28,-100},new int[]{-2,29,-3,30});
    states[128] = new State(-101);
    states[129] = new State(new int[]{7,131,8,132,9,133,10,134,11,135,12,136,15,137,18,-85},new int[]{-46,130,-1,129});
    states[130] = new State(-84);
    states[131] = new State(-86);
    states[132] = new State(-87);
    states[133] = new State(-88);
    states[134] = new State(-89);
    states[135] = new State(-90);
    states[136] = new State(-91);
    states[137] = new State(-92);
    states[138] = new State(new int[]{7,131,8,132,9,133,10,134,11,135,12,136,15,137,3,-76,18,-85},new int[]{-59,139,-44,4,-42,5,-46,6,-1,129});
    states[139] = new State(-77);
    states[140] = new State(-78);
    states[141] = new State(new int[]{4,146},new int[]{-62,142,-63,143});
    states[142] = new State(-79);
    states[143] = new State(new int[]{30,144});
    states[144] = new State(new int[]{4,145});
    states[145] = new State(new int[]{7,-80,8,-80,9,-80,10,-80,11,-80,12,-80,15,-80,18,-80,3,-80,30,-81});
    states[146] = new State(-82);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-45, new int[]{-43,3});
    rules[2] = new Rule(-44, new int[]{-42});
    rules[3] = new Rule(-42, new int[]{-46,18,4,27,-15,28});
    rules[4] = new Rule(-15, new int[]{-41});
    rules[5] = new Rule(-15, new int[]{-47});
    rules[6] = new Rule(-41, new int[]{-48,-11,4,23,-7,24,-39});
    rules[7] = new Rule(-48, new int[]{-49,-48});
    rules[8] = new Rule(-48, new int[]{});
    rules[9] = new Rule(-11, new int[]{16});
    rules[10] = new Rule(-7, new int[]{-8});
    rules[11] = new Rule(-7, new int[]{});
    rules[12] = new Rule(-8, new int[]{-9});
    rules[13] = new Rule(-9, new int[]{-10,-3});
    rules[14] = new Rule(-10, new int[]{-50});
    rules[15] = new Rule(-10, new int[]{-14});
    rules[16] = new Rule(-14, new int[]{-13});
    rules[17] = new Rule(-13, new int[]{-12});
    rules[18] = new Rule(-12, new int[]{20});
    rules[19] = new Rule(-39, new int[]{-38});
    rules[20] = new Rule(-38, new int[]{27,-40,28});
    rules[21] = new Rule(-40, new int[]{-40,-37});
    rules[22] = new Rule(-40, new int[]{});
    rules[23] = new Rule(-37, new int[]{-6,29});
    rules[24] = new Rule(-37, new int[]{-36});
    rules[25] = new Rule(-3, new int[]{4});
    rules[26] = new Rule(-6, new int[]{-10,-5});
    rules[27] = new Rule(-5, new int[]{-5,-2});
    rules[28] = new Rule(-5, new int[]{});
    rules[29] = new Rule(-2, new int[]{-3});
    rules[30] = new Rule(-2, new int[]{-3,46,-17});
    rules[31] = new Rule(-17, new int[]{-16});
    rules[32] = new Rule(-16, new int[]{-18});
    rules[33] = new Rule(-18, new int[]{-19});
    rules[34] = new Rule(-18, new int[]{-4,46,-16});
    rules[35] = new Rule(-19, new int[]{-21});
    rules[36] = new Rule(-21, new int[]{-20});
    rules[37] = new Rule(-20, new int[]{-22});
    rules[38] = new Rule(-22, new int[]{-23});
    rules[39] = new Rule(-23, new int[]{-24});
    rules[40] = new Rule(-24, new int[]{-25});
    rules[41] = new Rule(-25, new int[]{-26});
    rules[42] = new Rule(-26, new int[]{-27});
    rules[43] = new Rule(-27, new int[]{-28});
    rules[44] = new Rule(-28, new int[]{-29});
    rules[45] = new Rule(-29, new int[]{-30});
    rules[46] = new Rule(-30, new int[]{-31});
    rules[47] = new Rule(-31, new int[]{-32});
    rules[48] = new Rule(-32, new int[]{-33});
    rules[49] = new Rule(-33, new int[]{-34});
    rules[50] = new Rule(-34, new int[]{-35});
    rules[51] = new Rule(-35, new int[]{5});
    rules[52] = new Rule(-36, new int[]{-51});
    rules[53] = new Rule(-36, new int[]{-52});
    rules[54] = new Rule(-52, new int[]{34,23,-16,24,-36});
    rules[55] = new Rule(-51, new int[]{27,-36,28});
    rules[56] = new Rule(-51, new int[]{-53});
    rules[57] = new Rule(-51, new int[]{-54});
    rules[58] = new Rule(-54, new int[]{29});
    rules[59] = new Rule(-53, new int[]{-55,29});
    rules[60] = new Rule(-55, new int[]{-4,46,-16});
    rules[61] = new Rule(-55, new int[]{-56});
    rules[62] = new Rule(-4, new int[]{4});
    rules[63] = new Rule(-56, new int[]{-57,23,-58,24});
    rules[64] = new Rule(-57, new int[]{31,30,32,30,33});
    rules[65] = new Rule(-58, new int[]{-16});
    rules[66] = new Rule(-49, new int[]{7});
    rules[67] = new Rule(-49, new int[]{8});
    rules[68] = new Rule(-49, new int[]{9});
    rules[69] = new Rule(-49, new int[]{10});
    rules[70] = new Rule(-49, new int[]{11});
    rules[71] = new Rule(-49, new int[]{12});
    rules[72] = new Rule(-49, new int[]{13});
    rules[73] = new Rule(-49, new int[]{14});
    rules[74] = new Rule(-49, new int[]{15});
    rules[75] = new Rule(-43, new int[]{-59});
    rules[76] = new Rule(-43, new int[]{-60});
    rules[77] = new Rule(-43, new int[]{-60,-59});
    rules[78] = new Rule(-60, new int[]{-61});
    rules[79] = new Rule(-61, new int[]{22,-62});
    rules[80] = new Rule(-62, new int[]{-63,30,4});
    rules[81] = new Rule(-63, new int[]{-63,30,4});
    rules[82] = new Rule(-63, new int[]{4});
    rules[83] = new Rule(-59, new int[]{-44});
    rules[84] = new Rule(-46, new int[]{-1,-46});
    rules[85] = new Rule(-46, new int[]{});
    rules[86] = new Rule(-1, new int[]{7});
    rules[87] = new Rule(-1, new int[]{8});
    rules[88] = new Rule(-1, new int[]{9});
    rules[89] = new Rule(-1, new int[]{10});
    rules[90] = new Rule(-1, new int[]{11});
    rules[91] = new Rule(-1, new int[]{12});
    rules[92] = new Rule(-1, new int[]{15});
    rules[93] = new Rule(-64, new int[]{7});
    rules[94] = new Rule(-64, new int[]{8});
    rules[95] = new Rule(-64, new int[]{9});
    rules[96] = new Rule(-64, new int[]{10});
    rules[97] = new Rule(-64, new int[]{11});
    rules[98] = new Rule(-64, new int[]{12});
    rules[99] = new Rule(-47, new int[]{-10,-5});
    rules[100] = new Rule(-47, new int[]{-65,-10,-5});
    rules[101] = new Rule(-65, new int[]{-64});
    rules[102] = new Rule(-50, new int[]{-66});
    rules[103] = new Rule(-66, new int[]{-67,-68});
    rules[104] = new Rule(-67, new int[]{4});
    rules[105] = new Rule(-68, new int[]{25,26});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // ClassDeclaration -> NormalClassDeclaration
#line 91 "TestJavaCompilerParser.y"
                                                             {root=ValueStack[ValueStack.Depth-1].classRoot;}
#line default
        break;
      case 3: // NormalClassDeclaration -> ClassModifiers, CLASS, IDENTIFIER, OP_LT_BRACE, 
              //                           ClassMemberDeclaration, OP_RT_BRACE
#line 93 "TestJavaCompilerParser.y"
                                                                                                           {CurrentSemanticValue.classRoot =new AST.Class(ValueStack[ValueStack.Depth-4].String,ValueStack[ValueStack.Depth-2].member);}
#line default
        break;
      case 4: // ClassMemberDeclaration -> MethodDeclaration
#line 95 "TestJavaCompilerParser.y"
                                                             {CurrentSemanticValue.member= new AST.ClassMemberDeclaration(ValueStack[ValueStack.Depth-1].method);}
#line default
        break;
      case 6: // MethodDeclaration -> MethodModifiers, Result, IDENTIFIER, OP_LEFT_PAR, 
              //                      FormalParameterList, OP_RIGHT_PAR, MethodBody
#line 98 "TestJavaCompilerParser.y"
                                                                                                                    {CurrentSemanticValue.method =new AST.Method(ValueStack[ValueStack.Depth-6].type,ValueStack[ValueStack.Depth-5].String,ValueStack[ValueStack.Depth-1].compoundStmt);}
#line default
        break;
      case 9: // Result -> VOID
#line 104 "TestJavaCompilerParser.y"
                                       {CurrentSemanticValue.type= new AST.VoidType();}
#line default
        break;
      case 10: // FormalParameterList -> LastFormalParameter
#line 106 "TestJavaCompilerParser.y"
                                                            {CurrentSemanticValue.param=ValueStack[ValueStack.Depth-1].param;}
#line default
        break;
      case 12: // LastFormalParameter -> FormalParameter
#line 109 "TestJavaCompilerParser.y"
                                                         {CurrentSemanticValue.param=ValueStack[ValueStack.Depth-1].param;}
#line default
        break;
      case 13: // FormalParameter -> UnannType, VariableDeclaratorId
#line 111 "TestJavaCompilerParser.y"
                                                                  {CurrentSemanticValue.param=new AST.Parameter(ValueStack[ValueStack.Depth-2].type,ValueStack[ValueStack.Depth-1].varDeclaratorId);}
#line default
        break;
      case 15: // UnannType -> UnannPrimitiveType
#line 114 "TestJavaCompilerParser.y"
                                              {CurrentSemanticValue.type=ValueStack[ValueStack.Depth-1].type;}
#line default
        break;
      case 16: // UnannPrimitiveType -> NumericType
#line 116 "TestJavaCompilerParser.y"
                                                       {CurrentSemanticValue.type=ValueStack[ValueStack.Depth-1].type;}
#line default
        break;
      case 17: // NumericType -> IntegralType
#line 118 "TestJavaCompilerParser.y"
                                                  {CurrentSemanticValue.type=ValueStack[ValueStack.Depth-1].type;}
#line default
        break;
      case 18: // IntegralType -> INT
#line 120 "TestJavaCompilerParser.y"
                                              {CurrentSemanticValue.type=new AST.IntType();}
#line default
        break;
      case 19: // MethodBody -> Block
#line 122 "TestJavaCompilerParser.y"
                                             {CurrentSemanticValue.compoundStmt=ValueStack[ValueStack.Depth-1].compoundStmt;}
#line default
        break;
      case 20: // Block -> OP_LT_BRACE, BlockStatements, OP_RT_BRACE
#line 124 "TestJavaCompilerParser.y"
                                                                  {CurrentSemanticValue.compoundStmt = new AST.CompoundStatement(ValueStack[ValueStack.Depth-2].stmts); }
#line default
        break;
      case 21: // BlockStatements -> BlockStatements, BlockStatement
#line 126 "TestJavaCompilerParser.y"
                                                                   {CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-2].stmts; CurrentSemanticValue.stmts.Add(ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 22: // BlockStatements -> /* empty */
#line 127 "TestJavaCompilerParser.y"
                               { CurrentSemanticValue.stmts = new System.Collections.Generic.List<AST.Statement>(); }
#line default
        break;
      case 23: // BlockStatement -> LocalVariableDeclaration, SEMICOLON
#line 129 "TestJavaCompilerParser.y"
                                                                      {CurrentSemanticValue.stmt = new AST.ExpressionStatement(ValueStack[ValueStack.Depth-2].varDeclaratorExpr);}
#line default
        break;
      case 25: // VariableDeclaratorId -> IDENTIFIER
#line 132 "TestJavaCompilerParser.y"
                                                       {CurrentSemanticValue.varDeclaratorId=new AST.VariableDeclaratorId(ValueStack[ValueStack.Depth-1].String);}
#line default
        break;
      case 26: // LocalVariableDeclaration -> UnannType, VariableDeclaratorList
#line 134 "TestJavaCompilerParser.y"
                                                                           {CurrentSemanticValue.varDeclaratorExpr=new AST.VariableDeclarationExpr(ValueStack[ValueStack.Depth-2].type,ValueStack[ValueStack.Depth-1].varList);}
#line default
        break;
      case 27: // VariableDeclaratorList -> VariableDeclaratorList, VariableDeclarator
#line 136 "TestJavaCompilerParser.y"
                                                                               {CurrentSemanticValue.varList = ValueStack[ValueStack.Depth-2].varList; CurrentSemanticValue.varList.Add(ValueStack[ValueStack.Depth-1].varDeclarator); }
#line default
        break;
      case 28: // VariableDeclaratorList -> /* empty */
#line 137 "TestJavaCompilerParser.y"
                               { CurrentSemanticValue.varList = new System.Collections.Generic.List<AST.VariableDeclarator>(); }
#line default
        break;
      case 29: // VariableDeclarator -> VariableDeclaratorId
#line 139 "TestJavaCompilerParser.y"
                                                            {CurrentSemanticValue.varDeclarator=new AST.VariableDeclarator(ValueStack[ValueStack.Depth-1].varDeclaratorId);}
#line default
        break;
      case 30: // VariableDeclarator -> VariableDeclaratorId, OP_EQU, VariableInitializer
#line 140 "TestJavaCompilerParser.y"
                                                                   {CurrentSemanticValue.varDeclarator=new AST.VariableDeclarator(ValueStack[ValueStack.Depth-3].varDeclaratorId,ValueStack[ValueStack.Depth-1].expr);}
#line default
        break;
      case 31: // VariableInitializer -> Expression
#line 142 "TestJavaCompilerParser.y"
                                                       {CurrentSemanticValue.expr=ValueStack[ValueStack.Depth-1].expr;}
#line default
        break;
      case 32: // Expression -> AssignmentExpression
#line 144 "TestJavaCompilerParser.y"
                                                         {CurrentSemanticValue.expr=ValueStack[ValueStack.Depth-1].expr;}
#line default
        break;
      case 33: // AssignmentExpression -> ConditionalExpression
#line 146 "TestJavaCompilerParser.y"
                                                                {CurrentSemanticValue.expr=ValueStack[ValueStack.Depth-1].expr;}
#line default
        break;
      case 35: // ConditionalExpression -> ConditionalOrExpression
#line 150 "TestJavaCompilerParser.y"
                                                                    {CurrentSemanticValue.expr=ValueStack[ValueStack.Depth-1].expr;}
#line default
        break;
      case 36: // ConditionalOrExpression -> ConditionalAndExpression
#line 152 "TestJavaCompilerParser.y"
                                                                       {CurrentSemanticValue.expr=ValueStack[ValueStack.Depth-1].expr;}
#line default
        break;
      case 37: // ConditionalAndExpression -> InclusiveOrExpression
#line 154 "TestJavaCompilerParser.y"
                                                                      {CurrentSemanticValue.expr=ValueStack[ValueStack.Depth-1].expr;}
#line default
        break;
      case 38: // InclusiveOrExpression -> ExclusiveOrExpression
#line 156 "TestJavaCompilerParser.y"
                                                                    {CurrentSemanticValue.expr=ValueStack[ValueStack.Depth-1].expr;}
#line default
        break;
      case 39: // ExclusiveOrExpression -> AndExpression
#line 158 "TestJavaCompilerParser.y"
                                                               {CurrentSemanticValue.expr=ValueStack[ValueStack.Depth-1].expr;}
#line default
        break;
      case 40: // AndExpression -> EqualityExpression
#line 160 "TestJavaCompilerParser.y"
                                                           {CurrentSemanticValue.expr=ValueStack[ValueStack.Depth-1].expr;}
#line default
        break;
      case 41: // EqualityExpression -> RelationalExpression
#line 162 "TestJavaCompilerParser.y"
                                                                {CurrentSemanticValue.expr=ValueStack[ValueStack.Depth-1].expr;}
#line default
        break;
      case 42: // RelationalExpression -> ShiftExpression
#line 164 "TestJavaCompilerParser.y"
                                                             {CurrentSemanticValue.expr=ValueStack[ValueStack.Depth-1].expr;}
#line default
        break;
      case 43: // ShiftExpression -> AdditiveExpression
#line 166 "TestJavaCompilerParser.y"
                                                            {CurrentSemanticValue.expr=ValueStack[ValueStack.Depth-1].expr;}
#line default
        break;
      case 44: // AdditiveExpression -> MultiplicativeExpression
#line 168 "TestJavaCompilerParser.y"
                                                                  {CurrentSemanticValue.expr=ValueStack[ValueStack.Depth-1].expr;}
#line default
        break;
      case 45: // MultiplicativeExpression -> UnaryExpression
#line 170 "TestJavaCompilerParser.y"
                                                                {CurrentSemanticValue.expr=ValueStack[ValueStack.Depth-1].expr;}
#line default
        break;
      case 46: // UnaryExpression -> UnaryExpressionNotPlusMinus
#line 172 "TestJavaCompilerParser.y"
                                                                   {CurrentSemanticValue.expr=ValueStack[ValueStack.Depth-1].expr;}
#line default
        break;
      case 47: // UnaryExpressionNotPlusMinus -> PostfixExpression
#line 174 "TestJavaCompilerParser.y"
                                                                        {CurrentSemanticValue.expr=ValueStack[ValueStack.Depth-1].expr;}
#line default
        break;
      case 48: // PostfixExpression -> Primary
#line 176 "TestJavaCompilerParser.y"
                                                     {CurrentSemanticValue.expr=ValueStack[ValueStack.Depth-1].expr;}
#line default
        break;
      case 49: // Primary -> PrimaryNoNewArray
#line 178 "TestJavaCompilerParser.y"
                                                      {CurrentSemanticValue.expr=ValueStack[ValueStack.Depth-1].expr;}
#line default
        break;
      case 50: // PrimaryNoNewArray -> Literal
#line 180 "TestJavaCompilerParser.y"
                                                      {CurrentSemanticValue.expr=ValueStack[ValueStack.Depth-1].expr;}
#line default
        break;
      case 51: // Literal -> NUMBER
#line 182 "TestJavaCompilerParser.y"
                                         {CurrentSemanticValue.expr = new AST.NumberExpression(ValueStack[ValueStack.Depth-1].num);}
#line default
        break;
      case 62: // ExpressionName -> IDENTIFIER
#line 200 "TestJavaCompilerParser.y"
                                               {CurrentSemanticValue.varDeclaratorId=new AST.VariableDeclaratorId(ValueStack[ValueStack.Depth-1].String);}
#line default
        break;
      case 92: // ClassModifier -> STRICTFP
#line 244 "TestJavaCompilerParser.y"
                                  {CurrentSemanticValue.classmodi=new AST.ClassModifier(ValueStack[ValueStack.Depth-1]);}
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 269 "TestJavaCompilerParser.y"

public Parser(Scanner scanner) : base(scanner)
{
}
#line default
}
}
