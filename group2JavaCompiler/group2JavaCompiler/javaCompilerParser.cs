// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  SUJITHGEETHU
// DateTime: 29-05-2016 3.51.14 PM
// UserName: Sujith Geethu
// Input file <javaCompilerParser.y - 29-05-2016 3.51.05 PM>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace group2JavaCompiler
{
public enum Tokens {error=2,EOF=3,IDENTIFIER=4,NUMBER=5,BOOL_LITERAL=6,
    PUBLIC=7,PROTECTED=8,PRIVATE=9,ABSTRACT=10,STATIC=11,FINAL=12,
    SYNCHRONIZED=13,NATIVE=14,STRICTFP=15,VOID=16,EXPRESSION_STATEMENT=17,MAIN=18,
    CLASS=19,BOOL=20,INT=21,STRING=22,IMPORT=23,OP_LEFT_PAR=24,
    OP_RIGHT_PAR=25,OP_SQ_L_BR=26,OP_SQ_R_BR=27,OP_LT_BRACE=28,OP_RT_BRACE=29,SEMICOLON=30,
    OP_DOT=31,SYSTEM=32,OUT=33,PRINTLN=34,IF=35,ELSE=36,
    OP_ARROW=37,BREAK=38,CONTINUE=39,DO=40,WHILE=41,OP_ASSIGN=42,
    OP_ADD=43,OP_MINUS=44,OP_MUL=45,OP_DIV=46,OP_MODUL=47,OP_AND=48,
    OP_OR=49,OP_NOT=50,OP_EQU=51,OP_NOT_EQU=52,OP_LT=53,OP_GT=54,
    OP_GT_EQ=55,OP_LT_EQ=56,OP_DOUBLE_QUOTE=57};

public struct ValueType
#line 9 "javaCompilerParser.y"
       {
	public AST.Expression expr;
	public AST.Statement stmt;
	public AST.Method method;
	public AST.Type type;
	public AST.Modifier modifier;
	public AST.Arguments arg;
	public System.Collections.Generic.List<AST.Statement> stmts;
	
    public int num;
    public string String;
  	public bool Bool;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from javaCompilerParser.y - 29-05-2016 3.51.05 PM
#line 6 "javaCompilerParser.y"
	public static AST.Class root;
#line default
  // End verbatim content from javaCompilerParser.y - 29-05-2016 3.51.05 PM

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[48];
  private static State[] states = new State[70];
  private static string[] nonTerms = new string[] {
      "Expression", "CompilationUnit", "$accept", "TypeDeclaration", "ClassDeclaration", 
      "NormalClassDeclaration", "ClassModifier", "ClassBodyDeclaration", "ClassMemberDeclaration", 
      "MethodDeclaration", "MethodModifier", "Result", "FormalParameterList", 
      "BlockStatements", "LastFormalParameter", "FormalParameter", "UnannReferenceType", 
      "VariableDeclaratorId", "UnannArrayType", "UnannTypeVariable", "Dims", 
      "BlockStatement", "LocalVariableDeclarationStatement", "UnannPrimitiveType", 
      "VariableInitializer", "NumericType", "IntegralType", "AssignmentExpression", 
      "ConditionalExpression", "ConditionalOrExpression", "ConditionalAndExpression", 
      "InclusiveOrExpression", "ExclusiveOrExpression", "AndExpression", "EqualityExpression", 
      "RelationalExpression", "ShiftExpression", "AdditiveExpression", "MultiplicativeExpression", 
      "UnaryExpression", "UnaryExpressionNotPlusMinus", "PostfixExpression", 
      "Primary", "PrimaryNoNewArray", "Literal", };

  static Parser() {
    states[0] = new State(new int[]{7,68,11,69},new int[]{-2,1,-4,3,-5,4,-6,5,-7,6});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(-3);
    states[5] = new State(-4);
    states[6] = new State(new int[]{19,7});
    states[7] = new State(new int[]{4,8});
    states[8] = new State(new int[]{28,9});
    states[9] = new State(new int[]{7,66,11,67},new int[]{-8,10,-9,12,-10,13,-11,14});
    states[10] = new State(new int[]{29,11});
    states[11] = new State(-5);
    states[12] = new State(-8);
    states[13] = new State(-9);
    states[14] = new State(new int[]{7,66,11,67},new int[]{-11,15});
    states[15] = new State(new int[]{16,65},new int[]{-12,16});
    states[16] = new State(new int[]{4,17});
    states[17] = new State(new int[]{24,18});
    states[18] = new State(new int[]{4,64},new int[]{-13,19,-15,55,-16,56,-17,57,-19,59,-20,60});
    states[19] = new State(new int[]{25,20});
    states[20] = new State(new int[]{28,21});
    states[21] = new State(new int[]{21,54},new int[]{-14,22,-22,24,-23,25,-24,26,-26,52,-27,53});
    states[22] = new State(new int[]{29,23});
    states[23] = new State(-10);
    states[24] = new State(-21);
    states[25] = new State(-22);
    states[26] = new State(new int[]{4,51},new int[]{-18,27});
    states[27] = new State(new int[]{51,28});
    states[28] = new State(new int[]{5,50},new int[]{-25,29,-1,31,-28,32,-29,33,-30,34,-31,35,-32,36,-33,37,-34,38,-35,39,-36,40,-37,41,-38,42,-39,43,-40,44,-41,45,-42,46,-43,47,-44,48,-45,49});
    states[29] = new State(new int[]{30,30});
    states[30] = new State(-23);
    states[31] = new State(-28);
    states[32] = new State(-29);
    states[33] = new State(-30);
    states[34] = new State(-31);
    states[35] = new State(-32);
    states[36] = new State(-33);
    states[37] = new State(-34);
    states[38] = new State(-35);
    states[39] = new State(-36);
    states[40] = new State(-37);
    states[41] = new State(-38);
    states[42] = new State(-39);
    states[43] = new State(-40);
    states[44] = new State(-41);
    states[45] = new State(-42);
    states[46] = new State(-43);
    states[47] = new State(-44);
    states[48] = new State(-45);
    states[49] = new State(-46);
    states[50] = new State(-47);
    states[51] = new State(-27);
    states[52] = new State(-24);
    states[53] = new State(-25);
    states[54] = new State(-26);
    states[55] = new State(-14);
    states[56] = new State(-15);
    states[57] = new State(new int[]{4,51},new int[]{-18,58});
    states[58] = new State(-16);
    states[59] = new State(-17);
    states[60] = new State(new int[]{26,62},new int[]{-21,61});
    states[61] = new State(-18);
    states[62] = new State(new int[]{27,63});
    states[63] = new State(-20);
    states[64] = new State(-19);
    states[65] = new State(-13);
    states[66] = new State(-11);
    states[67] = new State(-12);
    states[68] = new State(-6);
    states[69] = new State(-7);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-3, new int[]{-2,3});
    rules[2] = new Rule(-2, new int[]{-4});
    rules[3] = new Rule(-4, new int[]{-5});
    rules[4] = new Rule(-5, new int[]{-6});
    rules[5] = new Rule(-6, new int[]{-7,19,4,28,-8,29});
    rules[6] = new Rule(-7, new int[]{7});
    rules[7] = new Rule(-7, new int[]{11});
    rules[8] = new Rule(-8, new int[]{-9});
    rules[9] = new Rule(-9, new int[]{-10});
    rules[10] = new Rule(-10, new int[]{-11,-11,-12,4,24,-13,25,28,-14,29});
    rules[11] = new Rule(-11, new int[]{7});
    rules[12] = new Rule(-11, new int[]{11});
    rules[13] = new Rule(-12, new int[]{16});
    rules[14] = new Rule(-13, new int[]{-15});
    rules[15] = new Rule(-15, new int[]{-16});
    rules[16] = new Rule(-16, new int[]{-17,-18});
    rules[17] = new Rule(-17, new int[]{-19});
    rules[18] = new Rule(-19, new int[]{-20,-21});
    rules[19] = new Rule(-20, new int[]{4});
    rules[20] = new Rule(-21, new int[]{26,27});
    rules[21] = new Rule(-14, new int[]{-22});
    rules[22] = new Rule(-22, new int[]{-23});
    rules[23] = new Rule(-23, new int[]{-24,-18,51,-25,30});
    rules[24] = new Rule(-24, new int[]{-26});
    rules[25] = new Rule(-26, new int[]{-27});
    rules[26] = new Rule(-27, new int[]{21});
    rules[27] = new Rule(-18, new int[]{4});
    rules[28] = new Rule(-25, new int[]{-1});
    rules[29] = new Rule(-1, new int[]{-28});
    rules[30] = new Rule(-28, new int[]{-29});
    rules[31] = new Rule(-29, new int[]{-30});
    rules[32] = new Rule(-30, new int[]{-31});
    rules[33] = new Rule(-31, new int[]{-32});
    rules[34] = new Rule(-32, new int[]{-33});
    rules[35] = new Rule(-33, new int[]{-34});
    rules[36] = new Rule(-34, new int[]{-35});
    rules[37] = new Rule(-35, new int[]{-36});
    rules[38] = new Rule(-36, new int[]{-37});
    rules[39] = new Rule(-37, new int[]{-38});
    rules[40] = new Rule(-38, new int[]{-39});
    rules[41] = new Rule(-39, new int[]{-40});
    rules[42] = new Rule(-40, new int[]{-41});
    rules[43] = new Rule(-41, new int[]{-42});
    rules[44] = new Rule(-42, new int[]{-43});
    rules[45] = new Rule(-43, new int[]{-44});
    rules[46] = new Rule(-44, new int[]{-45});
    rules[47] = new Rule(-45, new int[]{5});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // CompilationUnit -> TypeDeclaration
#line 74 "javaCompilerParser.y"
                                                        { root = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 3: // TypeDeclaration -> ClassDeclaration
#line 76 "javaCompilerParser.y"
                                                         { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 4: // ClassDeclaration -> NormalClassDeclaration
#line 78 "javaCompilerParser.y"
                                                             { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 5: // NormalClassDeclaration -> ClassModifier, CLASS, IDENTIFIER, OP_LT_BRACE, 
              //                           ClassBodyDeclaration, OP_RT_BRACE
#line 80 "javaCompilerParser.y"
                                                                                                          { CurrentSemanticValue = new AST.Class(ValueStack[ValueStack.Depth-6],ValueStack[ValueStack.Depth-4].String,ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 6: // ClassModifier -> PUBLIC
#line 82 "javaCompilerParser.y"
                                               { CurrentSemanticValue = new AST.Modifier(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 7: // ClassModifier -> STATIC
#line 83 "javaCompilerParser.y"
                                     { CurrentSemanticValue = new AST.Modifier(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 8: // ClassBodyDeclaration -> ClassMemberDeclaration
#line 85 "javaCompilerParser.y"
                                                                { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 9: // ClassMemberDeclaration -> MethodDeclaration
#line 87 "javaCompilerParser.y"
                                                               { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 10: // MethodDeclaration -> MethodModifier, MethodModifier, Result, IDENTIFIER, 
               //                      OP_LEFT_PAR, FormalParameterList, OP_RIGHT_PAR, 
               //                      OP_LT_BRACE, BlockStatements, OP_RT_BRACE
#line 91 "javaCompilerParser.y"
                                                              { CurrentSemanticValue = new AST.Method(ValueStack[ValueStack.Depth-10],ValueStack[ValueStack.Depth-9],ValueStack[ValueStack.Depth-8],ValueStack[ValueStack.Depth-7].String,ValueStack[ValueStack.Depth-5],ValueStack[ValueStack.Depth-3]); }
#line default
        break;
      case 11: // MethodModifier -> PUBLIC
#line 93 "javaCompilerParser.y"
                                                { CurrentSemanticValue = new AST.Modifier(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 12: // MethodModifier -> STATIC
#line 94 "javaCompilerParser.y"
                                     { CurrentSemanticValue = new AST.Modifier(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 13: // Result -> VOID
#line 96 "javaCompilerParser.y"
                                         { CurrentSemanticValue = new AST.NamedType("void"); }
#line default
        break;
      case 14: // FormalParameterList -> LastFormalParameter
#line 98 "javaCompilerParser.y"
                                                              { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 15: // LastFormalParameter -> FormalParameter
#line 100 "javaCompilerParser.y"
                                                           { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 16: // FormalParameter -> UnannReferenceType, VariableDeclaratorId
#line 102 "javaCompilerParser.y"
                                                                          { CurrentSemanticValue = new AST.Arguments(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 17: // UnannReferenceType -> UnannArrayType
#line 104 "javaCompilerParser.y"
                                                         { CurrentSemanticValue = new AST.ArrayType(new AST.NamedType(ValueStack[ValueStack.Depth-1])); }
#line default
        break;
      case 18: // UnannArrayType -> UnannTypeVariable, Dims
#line 106 "javaCompilerParser.y"
                                                            { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 19: // UnannTypeVariable -> IDENTIFIER
#line 108 "javaCompilerParser.y"
                                                     { CurrentSemanticValue = new AST.IdentifierExpression(ValueStack[ValueStack.Depth-1].String); }
#line default
        break;
      case 21: // BlockStatements -> BlockStatement
#line 112 "javaCompilerParser.y"
                                                       { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 22: // BlockStatement -> LocalVariableDeclarationStatement
#line 114 "javaCompilerParser.y"
                                                                     { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 23: // LocalVariableDeclarationStatement -> UnannPrimitiveType, VariableDeclaratorId, 
               //                                      OP_EQU, VariableInitializer, SEMICOLON
#line 116 "javaCompilerParser.y"
                                                                                                                   { CurrentSemanticValue = new AST.VariableDeclarationStatement(ValueStack[ValueStack.Depth-5],ValueStack[ValueStack.Depth-4],ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 24: // UnannPrimitiveType -> NumericType
#line 118 "javaCompilerParser.y"
                                                       { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 25: // NumericType -> IntegralType
#line 120 "javaCompilerParser.y"
                                                   { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 26: // IntegralType -> INT
#line 122 "javaCompilerParser.y"
                                            { CurrentSemanticValue = new AST.IntType(); }
#line default
        break;
      case 27: // VariableDeclaratorId -> IDENTIFIER
#line 124 "javaCompilerParser.y"
                                                       { CurrentSemanticValue = new AST.IdentifierExpression(ValueStack[ValueStack.Depth-1].String); }
#line default
        break;
      case 28: // VariableInitializer -> Expression
#line 126 "javaCompilerParser.y"
                                                       { CurrentSemanticValue = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 29: // Expression -> AssignmentExpression
#line 128 "javaCompilerParser.y"
                                                        { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 30: // AssignmentExpression -> ConditionalExpression
#line 130 "javaCompilerParser.y"
                                                                { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 31: // ConditionalExpression -> ConditionalOrExpression
#line 132 "javaCompilerParser.y"
                                                                  { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 32: // ConditionalOrExpression -> ConditionalAndExpression
#line 134 "javaCompilerParser.y"
                                                                     { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 33: // ConditionalAndExpression -> InclusiveOrExpression
#line 136 "javaCompilerParser.y"
                                                                   { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 34: // InclusiveOrExpression -> ExclusiveOrExpression
#line 138 "javaCompilerParser.y"
                                                                 { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 35: // ExclusiveOrExpression -> AndExpression
#line 140 "javaCompilerParser.y"
                                                           { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 36: // AndExpression -> EqualityExpression
#line 142 "javaCompilerParser.y"
                                                        { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 37: // EqualityExpression -> RelationalExpression
#line 144 "javaCompilerParser.y"
                                                              { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 38: // RelationalExpression -> ShiftExpression
#line 146 "javaCompilerParser.y"
                                                           { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 39: // ShiftExpression -> AdditiveExpression
#line 148 "javaCompilerParser.y"
                                                          { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 40: // AdditiveExpression -> MultiplicativeExpression
#line 150 "javaCompilerParser.y"
                                                                 { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 41: // MultiplicativeExpression -> UnaryExpression
#line 152 "javaCompilerParser.y"
                                                              { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 42: // UnaryExpression -> UnaryExpressionNotPlusMinus
#line 154 "javaCompilerParser.y"
                                                                 { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 43: // UnaryExpressionNotPlusMinus -> PostfixExpression
#line 156 "javaCompilerParser.y"
                                                                      { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 44: // PostfixExpression -> Primary
#line 158 "javaCompilerParser.y"
                                                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 45: // Primary -> PrimaryNoNewArray
#line 160 "javaCompilerParser.y"
                                                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 46: // PrimaryNoNewArray -> Literal
#line 162 "javaCompilerParser.y"
                                                    { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 47: // Literal -> NUMBER
#line 164 "javaCompilerParser.y"
                                            { CurrentSemanticValue = new IntegerLiteralExpression(ValueStack[ValueStack.Depth-1].num); }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 167 "javaCompilerParser.y"

public Parser(javaCompiler.Lexer.Scanner scanner) : base(scanner)
{
}
#line default
}
}
