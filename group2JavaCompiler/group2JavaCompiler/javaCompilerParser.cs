// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  PRETTYPC
// DateTime: 5/23/2016 9:12:36 PM
// UserName: Pretty
// Input file <javaCompilerParser.y - 5/23/2016 9:02:18 PM>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace group2JavaCompiler
{
public enum Tokens {error=2,EOF=3,IDENTIFIER=4,INTEGER_LITERAL=5,BOOL_LITERAL=6,
    PUBLIC=7,PROTECTED=8,PRIVATE=9,ABSTRACT=10,STATIC=11,FINAL=12,
    SYNCHRONIZED=13,NATIVE=14,STRICTFP=15,VOID=16,MAIN=17,CLASS=18,
    BOOL=19,INT=20,STRING=21,OP_LEFT_PAR=22,OP_RIGHT_PAR=23,OP_SQ_L_BR=24,
    OP_SQ_R_BR=25,OP_LT_BRACE=26,OP_RT_BRACE=27,SEMICOLON=28,OP_ASSIGN=29,OP_ADD=30,
    OP_MINUS=31,OP_MUL=32,OP_DIV=33,OP_MODUL=34,OP_AND=35,OP_NOT=36,
    OP_EQU=37,OP_NOT_EQU=38,OP_LT=39,OP_GT=40,OP_GT_EQ=41,OP_LT_EQ=42};

public struct ValueType
#line 9 "javaCompilerParser.y"
{
    public AST.Expression expr;
	public AST.Statement stmt;
	public AST.Types type;
	public System.Collections.Generic.List<AST.Statement> stmts;
    public int Integer;
    public string String;
  	public bool Bool;
	public char name;
	
	}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from javaCompilerParser.y - 5/23/2016 9:02:18 PM
#line 5 "javaCompilerParser.y"
public static AST.Statement root;
#line default
  // End verbatim content from javaCompilerParser.y - 5/23/2016 9:02:18 PM

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[77];
  private static State[] states = new State[101];
  private static string[] nonTerms = new string[] {
      "CompilationUnit", "$accept", "TypeDeclaration", "ClassDeclaration", "NormalClassDeclaration", 
      "ClassModifiers", "ClassBody", "ClassModifier", "ClassBodyDeclaration", 
      "ClassMemberDeclaration", "MethodDeclaration", "MethodModifiers", "MethodHeader", 
      "MethodBody", "MethodModifier", "Result", "MethodDeclarator", "FormalParameterList", 
      "LastFormalParameter", "FormalParameter", "UnannType", "VariableDeclaratorId", 
      "UnannReferenceType", "UnannPrimitiveType", "UnannArrayType", "UnannTypeVariable", 
      "Dims", "Block", "BlockStatements", "BlockStatement", "LocalVariableDeclarationStatement", 
      "LocalVariableDeclaration", "VariableDeclaratorList", "NumericType", "IntegralType", 
      "VariableDeclarator", "VariableInitializer", "Expression", "AssignmentExpression", 
      "ConditionalExpression", "ConditionalOrExpression", "ConditionalAndExpression", 
      "InclusiveOrExpression", "ExclusiveOrExpression", "AndExpression", "EqualityExpression", 
      "RelationalExpression", "ShiftExpression", "AdditiveExpression", "MultiplicativeExpression", 
      "UnaryExpression", "UnaryExpressionNotPlusMinus", "PostfixExpression", 
      "Primary", "PrimaryNoNewArray", "Literal", };

  static Parser() {
    states[0] = new State(new int[]{7,91,8,92,9,93,10,94,11,95,12,96,15,97,18,98},new int[]{-1,1,-3,3,-4,4,-5,5,-6,6,-8,89});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(-3);
    states[5] = new State(-4);
    states[6] = new State(new int[]{18,7});
    states[7] = new State(new int[]{4,8});
    states[8] = new State(new int[]{26,10},new int[]{-7,9});
    states[9] = new State(-5);
    states[10] = new State(new int[]{7,78,8,79,9,80,10,81,11,82,12,83,13,84,14,85,15,86,16,75},new int[]{-9,11,-10,13,-11,14,-12,15,-15,76,-13,87,-16,64});
    states[11] = new State(new int[]{27,12});
    states[12] = new State(-16);
    states[13] = new State(-17);
    states[14] = new State(-18);
    states[15] = new State(new int[]{16,75},new int[]{-13,16,-16,64});
    states[16] = new State(new int[]{26,19},new int[]{-14,17,-28,18});
    states[17] = new State(-19);
    states[18] = new State(-45);
    states[19] = new State(new int[]{4,59,20,63},new int[]{-29,20,-30,22,-31,23,-32,24,-21,26,-23,53,-25,54,-26,55,-24,60,-34,61,-35,62});
    states[20] = new State(new int[]{27,21});
    states[21] = new State(-46);
    states[22] = new State(-47);
    states[23] = new State(-48);
    states[24] = new State(new int[]{28,25});
    states[25] = new State(-49);
    states[26] = new State(new int[]{4,52},new int[]{-33,27,-36,28,-22,29});
    states[27] = new State(-50);
    states[28] = new State(-54);
    states[29] = new State(new int[]{37,30});
    states[30] = new State(new int[]{5,51},new int[]{-37,31,-38,32,-39,33,-40,34,-41,35,-42,36,-43,37,-44,38,-45,39,-46,40,-47,41,-48,42,-49,43,-50,44,-51,45,-52,46,-53,47,-54,48,-55,49,-56,50});
    states[31] = new State(-55);
    states[32] = new State(-57);
    states[33] = new State(-58);
    states[34] = new State(-59);
    states[35] = new State(-60);
    states[36] = new State(-61);
    states[37] = new State(-62);
    states[38] = new State(-63);
    states[39] = new State(-64);
    states[40] = new State(-65);
    states[41] = new State(-66);
    states[42] = new State(-67);
    states[43] = new State(-68);
    states[44] = new State(-69);
    states[45] = new State(-70);
    states[46] = new State(-71);
    states[47] = new State(-72);
    states[48] = new State(-73);
    states[49] = new State(-74);
    states[50] = new State(-75);
    states[51] = new State(-76);
    states[52] = new State(-56);
    states[53] = new State(-39);
    states[54] = new State(-41);
    states[55] = new State(new int[]{24,57},new int[]{-27,56});
    states[56] = new State(-42);
    states[57] = new State(new int[]{25,58});
    states[58] = new State(-44);
    states[59] = new State(-43);
    states[60] = new State(-40);
    states[61] = new State(-51);
    states[62] = new State(-52);
    states[63] = new State(-53);
    states[64] = new State(new int[]{4,66},new int[]{-17,65});
    states[65] = new State(-32);
    states[66] = new State(new int[]{22,67});
    states[67] = new State(new int[]{23,70,4,59,20,63},new int[]{-18,68,-19,71,-20,72,-21,73,-23,53,-25,54,-26,55,-24,60,-34,61,-35,62});
    states[68] = new State(new int[]{23,69});
    states[69] = new State(-34);
    states[70] = new State(-35);
    states[71] = new State(-36);
    states[72] = new State(-37);
    states[73] = new State(new int[]{4,52},new int[]{-22,74});
    states[74] = new State(-38);
    states[75] = new State(-33);
    states[76] = new State(new int[]{7,78,8,79,9,80,10,81,11,82,12,83,13,84,14,85,15,86,16,-22},new int[]{-12,77,-15,76});
    states[77] = new State(-21);
    states[78] = new State(-23);
    states[79] = new State(-24);
    states[80] = new State(-25);
    states[81] = new State(-26);
    states[82] = new State(-27);
    states[83] = new State(-28);
    states[84] = new State(-29);
    states[85] = new State(-30);
    states[86] = new State(-31);
    states[87] = new State(new int[]{26,19},new int[]{-14,88,-28,18});
    states[88] = new State(-20);
    states[89] = new State(new int[]{7,91,8,92,9,93,10,94,11,95,12,96,15,97,18,-8},new int[]{-6,90,-8,89});
    states[90] = new State(-7);
    states[91] = new State(-9);
    states[92] = new State(-10);
    states[93] = new State(-11);
    states[94] = new State(-12);
    states[95] = new State(-13);
    states[96] = new State(-14);
    states[97] = new State(-15);
    states[98] = new State(new int[]{4,99});
    states[99] = new State(new int[]{26,10},new int[]{-7,100});
    states[100] = new State(-6);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-3, new int[]{-4});
    rules[4] = new Rule(-4, new int[]{-5});
    rules[5] = new Rule(-5, new int[]{-6,18,4,-7});
    rules[6] = new Rule(-5, new int[]{18,4,-7});
    rules[7] = new Rule(-6, new int[]{-8,-6});
    rules[8] = new Rule(-6, new int[]{-8});
    rules[9] = new Rule(-8, new int[]{7});
    rules[10] = new Rule(-8, new int[]{8});
    rules[11] = new Rule(-8, new int[]{9});
    rules[12] = new Rule(-8, new int[]{10});
    rules[13] = new Rule(-8, new int[]{11});
    rules[14] = new Rule(-8, new int[]{12});
    rules[15] = new Rule(-8, new int[]{15});
    rules[16] = new Rule(-7, new int[]{26,-9,27});
    rules[17] = new Rule(-9, new int[]{-10});
    rules[18] = new Rule(-10, new int[]{-11});
    rules[19] = new Rule(-11, new int[]{-12,-13,-14});
    rules[20] = new Rule(-11, new int[]{-13,-14});
    rules[21] = new Rule(-12, new int[]{-15,-12});
    rules[22] = new Rule(-12, new int[]{-15});
    rules[23] = new Rule(-15, new int[]{7});
    rules[24] = new Rule(-15, new int[]{8});
    rules[25] = new Rule(-15, new int[]{9});
    rules[26] = new Rule(-15, new int[]{10});
    rules[27] = new Rule(-15, new int[]{11});
    rules[28] = new Rule(-15, new int[]{12});
    rules[29] = new Rule(-15, new int[]{13});
    rules[30] = new Rule(-15, new int[]{14});
    rules[31] = new Rule(-15, new int[]{15});
    rules[32] = new Rule(-13, new int[]{-16,-17});
    rules[33] = new Rule(-16, new int[]{16});
    rules[34] = new Rule(-17, new int[]{4,22,-18,23});
    rules[35] = new Rule(-17, new int[]{4,22,23});
    rules[36] = new Rule(-18, new int[]{-19});
    rules[37] = new Rule(-19, new int[]{-20});
    rules[38] = new Rule(-20, new int[]{-21,-22});
    rules[39] = new Rule(-21, new int[]{-23});
    rules[40] = new Rule(-21, new int[]{-24});
    rules[41] = new Rule(-23, new int[]{-25});
    rules[42] = new Rule(-25, new int[]{-26,-27});
    rules[43] = new Rule(-26, new int[]{4});
    rules[44] = new Rule(-27, new int[]{24,25});
    rules[45] = new Rule(-14, new int[]{-28});
    rules[46] = new Rule(-28, new int[]{26,-29,27});
    rules[47] = new Rule(-29, new int[]{-30});
    rules[48] = new Rule(-30, new int[]{-31});
    rules[49] = new Rule(-31, new int[]{-32,28});
    rules[50] = new Rule(-32, new int[]{-21,-33});
    rules[51] = new Rule(-24, new int[]{-34});
    rules[52] = new Rule(-34, new int[]{-35});
    rules[53] = new Rule(-35, new int[]{20});
    rules[54] = new Rule(-33, new int[]{-36});
    rules[55] = new Rule(-36, new int[]{-22,37,-37});
    rules[56] = new Rule(-22, new int[]{4});
    rules[57] = new Rule(-37, new int[]{-38});
    rules[58] = new Rule(-38, new int[]{-39});
    rules[59] = new Rule(-39, new int[]{-40});
    rules[60] = new Rule(-40, new int[]{-41});
    rules[61] = new Rule(-41, new int[]{-42});
    rules[62] = new Rule(-42, new int[]{-43});
    rules[63] = new Rule(-43, new int[]{-44});
    rules[64] = new Rule(-44, new int[]{-45});
    rules[65] = new Rule(-45, new int[]{-46});
    rules[66] = new Rule(-46, new int[]{-47});
    rules[67] = new Rule(-47, new int[]{-48});
    rules[68] = new Rule(-48, new int[]{-49});
    rules[69] = new Rule(-49, new int[]{-50});
    rules[70] = new Rule(-50, new int[]{-51});
    rules[71] = new Rule(-51, new int[]{-52});
    rules[72] = new Rule(-52, new int[]{-53});
    rules[73] = new Rule(-53, new int[]{-54});
    rules[74] = new Rule(-54, new int[]{-55});
    rules[75] = new Rule(-55, new int[]{-56});
    rules[76] = new Rule(-56, new int[]{5});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 188 "javaCompilerParser.y"
int yywrap()
{
    return 1;
}
public Parser(Scanner scanner) : base(scanner)
{
}
#line default
}
}
